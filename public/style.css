// public/script.js - UPDATED for New UI/UX

document.addEventListener('DOMContentLoaded', () => {
    // --- Get DOM Elements ---
    const landingSection = document.getElementById('landingSection');
    const appSection = document.getElementById('appSection');
    const imageInput = document.getElementById('imageInput');
    const fileNameDisplay = document.getElementById('fileName'); // In landing/progress
    const imagePreviewArea = document.getElementById('imagePreviewArea'); // In backend HTML, remove if not using
    const imagePreview = document.getElementById('imagePreview'); // In backend HTML, remove if not using
    const optionsForm = document.getElementById('optionsForm');
    const convertBtn = document.getElementById('convertBtn'); // Now "Update SVG" button
    const statusArea = document.getElementById('statusArea'); // Status in app section
    const landingStatusArea = document.getElementById('landingStatusArea'); // Status in landing section
    const svgOutputDiv = document.getElementById('svgOutput');
    const svgCodeTextarea = document.getElementById('svgCode');
    const downloadBtn = document.getElementById('downloadBtn');
    const copyBtn = document.getElementById('copyBtn');
    const downloadLink = document.getElementById('downloadLink');
    const uploadNewBtn = document.getElementById('uploadNewBtn'); // Button in app header

    // Upload Area Elements
    const uploadArea = document.getElementById('uploadArea');
    const dropZone = document.getElementById('dropZone');
    const uploadProgress = document.getElementById('uploadProgress');
    const progressBar = document.getElementById('progressBar');
    const progressText = document.getElementById('progressText');
    const fileNameProgress = document.getElementById('fileName'); // Also used in progress bar display

    // Controlling option elements
    const modeSelect = document.getElementById('optMode');
    const colormodeSelect = document.getElementById('optColormode');

    // Dependent option group elements (keep same refs as before)
    const splineThresholdGroup = document.getElementById('groupSplineThreshold');
    // ... (get references for ALL other conditional groups: spliceThresholdGroup, segmentLengthGroup, etc.) ...
     const spliceThresholdGroup = document.getElementById('groupSpliceThreshold');
     const segmentLengthGroup = document.getElementById('groupSegmentLength');
     const hierarchicalGroup = document.getElementById('groupHierarchical');
     const gradientStepGroup = document.getElementById('groupGradientStep');
     const colorPrecisionGroup = document.getElementById('groupColorPrecision');
     const cornerThresholdGroup = document.getElementById('groupCornerThreshold');


    // --- State Variables ---
    let currentFile = null; // Store the selected/dropped File object
    let currentFilenameBase = 'vectorised-image';
    let currentSvgContent = '';

    // --- Initial UI Setup ---
    showLandingView(); // Start with the landing page visible
    updateOptionsAvailability(); // Set initial disabled state of options

    // --- Drag and Drop Event Listeners ---
    dropZone.addEventListener('dragenter', (e) => {
        e.preventDefault();
        dropZone.classList.add('dragover');
    });
    dropZone.addEventListener('dragover', (e) => {
        e.preventDefault(); // Necessary to allow drop
        dropZone.classList.add('dragover');
    });
    dropZone.addEventListener('dragleave', (e) => {
        e.preventDefault();
        dropZone.classList.remove('dragover');
    });
    dropZone.addEventListener('drop', (e) => {
        e.preventDefault();
        dropZone.classList.remove('dragover');
        const files = e.dataTransfer.files;
        if (files.length > 0) {
            handleFile(files[0]); // Process the first dropped file
        }
    });
    // Also trigger file input click when drop zone itself is clicked
     dropZone.addEventListener('click', (e) => {
         // Prevent triggering if the click is on the button/label inside
         if (e.target.id !== 'imageInput' && e.target.tagName !== 'LABEL') {
            imageInput.click();
        }
    });

    // --- Standard File Input Listener ---
    imageInput.addEventListener('change', (event) => {
        if (event.target.files.length > 0) {
            handleFile(event.target.files[0]);
        }
    });

    // --- Control Button Listeners ---
    convertBtn.addEventListener('click', handleConvert); // "Update SVG"
    downloadBtn.addEventListener('click', handleDownload);
    copyBtn.addEventListener('click', handleCopy);
    uploadNewBtn.addEventListener('click', resetAppToLanding); // "Upload New" button

    // --- Option Change Listeners ---
    modeSelect.addEventListener('change', updateOptionsAvailability);
    colormodeSelect.addEventListener('change', updateOptionsAvailability);
    // Add input listener to sliders to enable update button
    optionsForm.querySelectorAll('input[type="range"], select').forEach(input => {
        input.addEventListener('change', () => {
             if (currentFile) { // Only enable update if there's a processed image
                convertBtn.disabled = false;
                convertBtn.textContent = 'Update SVG'; // Change text to reflect action
            }
        });
    });
     // --- Slider Value Display Updates (Keep this logic) ---
     optionsForm.querySelectorAll('input[type="range"]').forEach(slider => { /* ... same slider value display update code ... */ });


    // --- Core Functions ---

    // Handles file selection from input OR drag/drop
    function handleFile(file) {
        if (!file) {
            resetAppToLanding();
            return;
        }
        currentFile = file; // Store the file object

        // Clear previous status/results
        resetResultArea();
        landingStatusArea.textContent = ''; // Clear landing status

        // Validation
        if (file.size > 15 * 1024 * 1024) {
            showLandingError('Error: File exceeds 15MB limit.');
            resetAppToLanding(); return;
        }
        if (!['image/jpeg', 'image/png', 'image/webp', 'image/bmp'].includes(file.type)) {
             showLandingError(`Error: Unsupported file type (${file.type||'?'}).`);
             resetAppToLanding(); return;
        }

        fileNameDisplay.textContent = file.name; // Show file name early
        fileNameProgress.textContent = file.name; // Show in progress bar area too
        currentFilenameBase = file.name.includes('.') ? file.name.substring(0, file.name.lastIndexOf('.')) : file.name;

        // Show progress bar area, hide drop zone
        dropZone.style.display = 'none';
        uploadProgress.style.display = 'block';
        simulateUploadProgress(() => {
            // Transition to app view AFTER simulated progress
            showAppView();
            handleConvert(); // Trigger initial conversion
        });
    }

    // Simulate upload progress (replace with real progress if backend supported it)
    function simulateUploadProgress(callback) {
        let progress = 0;
        progressBar.style.setProperty('--progress', `0%`);
        progressText.textContent = `Processing... 0%`; // Change text

        const interval = setInterval(() => {
            progress += Math.random() * 15 + 5; // Simulate variable progress
            if (progress >= 100) {
                progress = 100;
                clearInterval(interval);
                 progressText.textContent = `Processing... 100%`;
                 progressBar.style.setProperty('--progress', `100%`);
                // Short delay before calling callback
                 setTimeout(callback, 300);
            } else {
                 progressText.textContent = `Processing... ${Math.round(progress)}%`;
                 progressBar.style.setProperty('--progress', `${progress}%`);
            }
        }, 100); // Update progress interval
    }

    // Main conversion logic (sends to backend)
    async function handleConvert() {
        if (!currentFile) {
            updateStatus('No file selected for conversion.', 'error');
            return;
        }

        updateStatus('Vectorizing your image...', 'loading'); // App status
        convertBtn.disabled = true;
        convertBtn.textContent = 'Working...';
        downloadBtn.disabled = true; // Disable while processing
        copyBtn.disabled = true;
        resetResultArea(false); // Clear previous SVG, keep status

        const formData = new FormData();
        formData.append('imageFile', currentFile); // Send the stored File object

        const optionsData = new FormData(optionsForm);
        for (let [key, value] of optionsData.entries()) {
            const element = optionsForm.elements[key];
            if (element && !element.disabled && value !== '' && value !== null) {
                formData.append(key, value);
            }
        }

        console.log("Sending data to backend /convert endpoint...");
        try {
            const response = await fetch('/convert', { method: 'POST', body: formData });
            const result = await response.json();
            if (!response.ok) { throw new Error(result.error || `Server error: ${response.status}`); }

            if (result.svg) {
                currentSvgContent = result.svg;
                svgOutputDiv.innerHTML = currentSvgContent;
                svgCodeTextarea.value = currentSvgContent;
                 svgOutputDiv.classList.remove('placeholder-text');
                updateStatus('Vectorization Complete!', 'success', 3000);
                downloadBtn.disabled = false; copyBtn.disabled = false; // Enable results buttons
                 convertBtn.textContent = 'Update SVG'; // Ready for re-runs
                 convertBtn.disabled = true; // Disable until an option changes
            } else { throw new Error("Server response ok but no SVG data."); }

        } catch (error) {
            console.error('Conversion Request Failed:', error);
            updateStatus(`Error: ${error.message}`, 'error');
            resetResultArea(false); downloadBtn.disabled = true; copyBtn.disabled = true;
             convertBtn.textContent = 'Update SVG'; // Reset text even on error
            // Keep convertBtn disabled on error until file re-selected? Or allow retry? Let's allow retry if file is present
             convertBtn.disabled = !currentFile;

        }
        // Note: We don't re-enable convertBtn in finally, only on success or if file still exists after error
    }

    // --- UI State Changes ---
    function showLandingView() {
        landingSection.classList.remove('hidden');
        appSection.classList.add('hidden');
        // Reset upload area specific elements
         resetUploadArea();
    }

    function showAppView() {
        landingSection.classList.add('hidden');
        appSection.classList.remove('hidden');
        updateOptionsAvailability(); // Ensure options are correctly enabled/disabled
        resetResultArea(); // Clear any previous results in app view
         statusArea.textContent = ''; // Clear app status too
    }

    function resetAppToLanding() {
        currentFile = null;
        currentSvgContent = '';
        imageInput.value = ''; // Clear file input
         fileNameDisplay.textContent = 'No file chosen'; // For progress area reset
        showLandingView();
         updateStatus('', ''); // Clear any lingering app status
         landingStatusArea.textContent = ''; // Clear landing status
    }

     function resetUploadArea(){
        dropZone.style.display = 'block';
        uploadProgress.style.display = 'none';
        progressBar.style.setProperty('--progress', `0%`);
        progressText.textContent = 'Processing... 0%';
        fileNameProgress.textContent = '';
    }


    // --- Conditional Options Logic (Keep exact same as previous version) ---
    function updateOptionsAvailability() { /* ... same logic ... */ }
    function toggleOptionGroup(groupElement, enable) { /* ... same logic ... */ }

    // --- Download and Copy Logic (Keep exact same as previous version) ---
    function handleDownload() { /* ... same logic ... */ }
    function handleCopy() { /* ... same logic ... */ }

    // --- Utility Functions (Keep existing) ---
    let statusClearTimer;
    function updateStatus(message, type, clearDelay = 0) { /* ... */ } // Main app status
    function showLandingError(message){ // Specific helper for landing status
        landingStatusArea.textContent = message;
        landingStatusArea.className = 'status-area landing-status error';
    }
    function resetFileSelection() { /* (Included in resetAppToLanding) */ }
    function resetResultArea(clearStatusToo = true) { /* ... (Modified slightly) */
         svgOutputDiv.innerHTML = '<p class="placeholder-text">Processing image...</p>'; // Change placeholder for app view
         svgOutputDiv.classList.add('placeholder-text');
         svgCodeTextarea.value = ''; currentSvgContent = '';
         downloadBtn.disabled = true; copyBtn.disabled = true;
         if (clearStatusToo) {
             updateStatus('', ''); // Clear app status
         }
    }

    // --- Initial State Call ---
    // updateOptionsAvailability is called initially by showLandingView->resetAppToLanding
    // (No, need to call it explicitly)
    updateOptionsAvailability();

}); // End DOMContentLoaded
